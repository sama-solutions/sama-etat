#!/bin/bash

# Test final complet de l'int√©gration des photos
echo "=== TEST FINAL - INT√âGRATION PHOTOS SAMA_CARTE ==="

# Configuration
export PGPASSWORD=odoo
PORT=8071

echo ""
echo "üîç 1. V√âRIFICATION DE LA BASE DE DONN√âES"
echo "========================================"

# Test connexion base
if psql -U odoo -d sama_carte_demo -c "SELECT 1;" > /dev/null 2>&1; then
    echo "‚úÖ Connexion base de donn√©es OK"
else
    echo "‚ùå Impossible de se connecter √† la base"
    exit 1
fi

# V√©rification structure table
COLUMNS=$(psql -U odoo -d sama_carte_demo -t -c "SELECT column_name FROM information_schema.columns WHERE table_name='membership_member' AND column_name='image_1920';" | tr -d ' ')
if [ "$COLUMNS" = "image_1920" ]; then
    echo "‚úÖ Colonne image_1920 pr√©sente"
else
    echo "‚ùå Colonne image_1920 manquante"
    exit 1
fi

# Statistiques membres
TOTAL_MEMBERS=$(psql -U odoo -d sama_carte_demo -t -c "SELECT COUNT(*) FROM membership_member;" | tr -d ' ')
MEMBERS_WITH_PHOTOS=$(psql -U odoo -d sama_carte_demo -t -c "SELECT COUNT(*) FROM membership_member WHERE image_1920 IS NOT NULL;" | tr -d ' ')
VALID_CARDS=$(psql -U odoo -d sama_carte_demo -t -c "SELECT COUNT(*) FROM membership_member WHERE expiration_date >= CURRENT_DATE;" | tr -d ' ')
EXPIRED_CARDS=$(psql -U odoo -d sama_carte_demo -t -c "SELECT COUNT(*) FROM membership_member WHERE expiration_date < CURRENT_DATE;" | tr -d ' ')

echo "üìä Statistiques:"
echo "   - Total membres: $TOTAL_MEMBERS"
echo "   - Avec photos: $MEMBERS_WITH_PHOTOS"
echo "   - Cartes valides: $VALID_CARDS"
echo "   - Cartes expir√©es: $EXPIRED_CARDS"

echo ""
echo "üåê 2. V√âRIFICATION SERVEUR ODOO"
echo "==============================="

# Test connectivit√© serveur
if curl -s http://localhost:$PORT > /dev/null; then
    echo "‚úÖ Serveur Odoo accessible sur port $PORT"
else
    echo "‚ùå Serveur Odoo non accessible"
    exit 1
fi

# Test page de login
LOGIN_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:$PORT/web/login -o /dev/null)
if [ "$LOGIN_RESPONSE" = "200" ]; then
    echo "‚úÖ Page de login accessible"
else
    echo "‚ùå Page de login non accessible (code: $LOGIN_RESPONSE)"
fi

echo ""
echo "üîó 3. TEST PAGES PUBLIQUES"
echo "=========================="

# R√©cup√©rer un token de test
FIRST_TOKEN=$(psql -U odoo -d sama_carte_demo -t -c "SELECT access_token FROM membership_member LIMIT 1;" | tr -d ' ')
FIRST_NAME=$(psql -U odoo -d sama_carte_demo -t -c "SELECT name FROM membership_member LIMIT 1;" | tr -d ' ')

if [ ! -z "$FIRST_TOKEN" ]; then
    echo "üîë Token de test: ${FIRST_TOKEN:0:8}..."
    echo "üë§ Membre de test: $FIRST_NAME"
    
    # Test page publique
    PUBLIC_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:$PORT/member/$FIRST_TOKEN -o /tmp/test_public_page.html)
    if [ "$PUBLIC_RESPONSE" = "200" ]; then
        echo "‚úÖ Page publique accessible"
        
        # V√©rifier contenu
        if grep -q "$FIRST_NAME" /tmp/test_public_page.html; then
            echo "‚úÖ Nom du membre affich√©"
        else
            echo "‚ö†Ô∏è  Nom du membre non trouv√©"
        fi
        
        if grep -q "image_1920" /tmp/test_public_page.html; then
            echo "‚úÖ Image d√©tect√©e dans le HTML"
        else
            echo "‚ö†Ô∏è  Image non d√©tect√©e dans le HTML"
        fi
        
        if grep -q "QR Code" /tmp/test_public_page.html; then
            echo "‚úÖ QR Code pr√©sent"
        else
            echo "‚ö†Ô∏è  QR Code non trouv√©"
        fi
    else
        echo "‚ùå Page publique non accessible (code: $PUBLIC_RESPONSE)"
    fi
else
    echo "‚ùå Aucun token trouv√©"
fi

echo ""
echo "üìÅ 4. V√âRIFICATION FICHIERS"
echo "==========================="

# V√©rifier fichiers photos
if [ -d "headshots" ]; then
    ORIGINAL_PHOTOS=$(ls headshots/*.jpg 2>/dev/null | wc -l)
    echo "‚úÖ Photos originales: $ORIGINAL_PHOTOS"
else
    echo "‚ö†Ô∏è  Dossier headshots non trouv√©"
fi

if [ -d "data/processed_headshots" ]; then
    PROCESSED_PHOTOS=$(ls data/processed_headshots/*.jpg 2>/dev/null | wc -l)
    echo "‚úÖ Photos trait√©es: $PROCESSED_PHOTOS"
else
    echo "‚ö†Ô∏è  Dossier processed_headshots non trouv√©"
fi

# V√©rifier scripts
SCRIPTS=("process_headshots.py" "add_photos_to_members.py" "install_with_demo.sh" "start_demo.sh")
for script in "${SCRIPTS[@]}"; do
    if [ -f "scripts/$script" ]; then
        echo "‚úÖ Script $script pr√©sent"
    else
        echo "‚ùå Script $script manquant"
    fi
done

echo ""
echo "üéØ 5. R√âSUM√â FINAL"
echo "=================="

if [ "$MEMBERS_WITH_PHOTOS" = "$TOTAL_MEMBERS" ] && [ "$TOTAL_MEMBERS" -gt "0" ]; then
    echo "üéâ SUCC√àS COMPLET!"
    echo "   ‚úÖ Tous les membres ($TOTAL_MEMBERS) ont des photos"
    echo "   ‚úÖ Base de donn√©es fonctionnelle"
    echo "   ‚úÖ Serveur Odoo op√©rationnel"
    echo "   ‚úÖ Pages publiques accessibles"
    echo ""
    echo "üöÄ PR√äT POUR LA PRODUCTION!"
    echo ""
    echo "üìã ACTIONS SUIVANTES:"
    echo "   1. Tester l'interface: http://localhost:$PORT"
    echo "   2. Login: admin / admin"
    echo "   3. Menu: Gestion des Membres > Membres"
    echo "   4. V√©rifier les photos dans les fiches"
    echo "   5. Tester l'impression des cartes PDF"
    echo "   6. V√©rifier les pages publiques"
    echo ""
    echo "üíæ SAUVEGARDES DISPONIBLES:"
    ls -la backup/ | grep sama_carte | tail -3
else
    echo "‚ö†Ô∏è  PROBL√àMES D√âTECT√âS"
    echo "   - Membres sans photos: $((TOTAL_MEMBERS - MEMBERS_WITH_PHOTOS))"
    echo "   - V√©rifier les logs et relancer les scripts"
fi

echo ""
echo "üîß COMMANDES UTILES:"
echo "   - Red√©marrer: ./scripts/start_demo.sh"
echo "   - Ajouter photos: python3 scripts/add_photos_to_members.py"
echo "   - Arr√™ter: pkill -f 'odoo.*--http-port=8071'"
echo ""
echo "=== FIN DU TEST ==="