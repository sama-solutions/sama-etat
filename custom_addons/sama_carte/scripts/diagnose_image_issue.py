#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de diagnostic pour les probl√®mes d'affichage des images
"""

import os
import sys
import base64
import psycopg2
from pathlib import Path

def diagnose_image_issue():
    """Diagnostique les probl√®mes d'affichage des images"""
    
    # Configuration base de donn√©es
    db_config = {
        'host': 'localhost',
        'database': 'sama_carte_demo',
        'user': 'odoo',
        'password': 'odoo',
        'port': 5432
    }
    
    print("=== DIAGNOSTIC PROBL√àME IMAGES ===")
    print()
    
    try:
        # Connexion √† la base
        conn = psycopg2.connect(**db_config)
        cursor = conn.cursor()
        
        # 1. V√©rifier la structure de la table
        print("1. STRUCTURE DE LA TABLE")
        print("========================")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'membership_member' 
            AND column_name LIKE '%image%'
            ORDER BY column_name;
        """)
        
        image_columns = cursor.fetchall()
        if image_columns:
            for col_name, data_type, nullable in image_columns:
                print(f"‚úÖ Colonne: {col_name} | Type: {data_type} | Nullable: {nullable}")
        else:
            print("‚ùå Aucune colonne image trouv√©e")
            return False
        
        print()
        
        # 2. V√©rifier les donn√©es
        print("2. DONN√âES IMAGES")
        print("=================")
        cursor.execute("""
            SELECT id, name, 
                   CASE WHEN image_1920 IS NOT NULL THEN 'OUI' ELSE 'NON' END as has_image,
                   LENGTH(image_1920) as image_size,
                   LEFT(ENCODE(image_1920, 'base64'), 50) as image_preview
            FROM membership_member 
            ORDER BY id LIMIT 3;
        """)
        
        members = cursor.fetchall()
        for member_id, name, has_image, size, preview in members:
            print(f"ID: {member_id} | {name}")
            print(f"   Image: {has_image} | Taille: {size} bytes")
            if preview:
                print(f"   Aper√ßu: {preview}...")
            print()
        
        # 3. V√©rifier les tokens d'acc√®s
        print("3. TOKENS D'ACC√àS")
        print("=================")
        cursor.execute("""
            SELECT id, name, access_token 
            FROM membership_member 
            WHERE access_token IS NOT NULL 
            ORDER BY id LIMIT 3;
        """)
        
        tokens = cursor.fetchall()
        for member_id, name, token in tokens:
            print(f"ID: {member_id} | {name} | Token: {token[:8]}...")
        
        print()
        
        # 4. Test de d√©codage d'une image
        print("4. TEST D√âCODAGE IMAGE")
        print("======================")
        cursor.execute("""
            SELECT image_1920 FROM membership_member 
            WHERE image_1920 IS NOT NULL 
            LIMIT 1;
        """)
        
        result = cursor.fetchone()
        if result and result[0]:
            image_data = result[0]
            try:
                # Tenter de d√©coder l'image
                decoded = base64.b64decode(image_data)
                print(f"‚úÖ Image d√©cod√©e avec succ√®s: {len(decoded)} bytes")
                
                # V√©rifier le format
                if decoded.startswith(b'\xff\xd8\xff'):
                    print("‚úÖ Format JPEG d√©tect√©")
                elif decoded.startswith(b'\x89PNG'):
                    print("‚úÖ Format PNG d√©tect√©")
                else:
                    print("‚ö†Ô∏è  Format d'image non reconnu")
                    print(f"   Premiers bytes: {decoded[:10].hex()}")
                
            except Exception as e:
                print(f"‚ùå Erreur de d√©codage: {e}")
        else:
            print("‚ùå Aucune image trouv√©e pour le test")
        
        print()
        
        # 5. V√©rifier les champs calcul√©s
        print("5. CHAMPS CALCUL√âS")
        print("==================")
        cursor.execute("""
            SELECT id, name, card_status, 
                   CASE WHEN barcode_qr IS NOT NULL THEN 'OUI' ELSE 'NON' END as has_qr
            FROM membership_member 
            ORDER BY id LIMIT 3;
        """)
        
        computed_fields = cursor.fetchall()
        for member_id, name, status, has_qr in computed_fields:
            print(f"ID: {member_id} | {name} | Statut: {status} | QR: {has_qr}")
        
        cursor.close()
        conn.close()
        
        print()
        print("=== RECOMMANDATIONS ===")
        print()
        
        # Recommandations bas√©es sur les r√©sultats
        if not image_columns:
            print("‚ùå PROBL√àME: Colonne image_1920 manquante")
            print("   Solution: Ex√©cuter la mise √† jour du module")
            print("   Commande: odoo-bin -d sama_carte_demo -u sama_carte --stop-after-init")
        
        elif not any(size > 0 for _, _, _, size, _ in members if size):
            print("‚ùå PROBL√àME: Aucune image en base")
            print("   Solution: Relancer le script d'ajout des photos")
            print("   Commande: python3 scripts/add_photos_to_members.py")
        
        else:
            print("‚úÖ DONN√âES OK: Images pr√©sentes en base")
            print()
            print("üîç V√âRIFICATIONS SUPPL√âMENTAIRES:")
            print("   1. Red√©marrer Odoo pour recharger le mod√®le")
            print("   2. Vider le cache du navigateur")
            print("   3. V√©rifier les permissions d'acc√®s aux images")
            print("   4. Tester en mode d√©veloppeur Odoo")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

if __name__ == "__main__":
    diagnose_image_issue()