#!/usr/bin/env python3
"""
Script de v√©rification de l'int√©grit√© de la sauvegarde SAMA SYNDICAT V1.2
"""

import os
from pathlib import Path

def verify_backup():
    """V√©rifier l'int√©grit√© de la sauvegarde"""
    
    print("üîç V√âRIFICATION DE LA SAUVEGARDE SAMA SYNDICAT V1.2")
    print("=" * 60)
    
    backup_path = Path(__file__).parent
    errors = []
    warnings = []
    
    # Fichiers essentiels
    essential_files = [
        '__manifest__.py',
        '__init__.py',
        'BACKUP_INFO.md',
        'README.md',
        'RESTORE.py'
    ]
    
    print("üìã V√©rification des fichiers essentiels...")
    for file in essential_files:
        file_path = backup_path / file
        if file_path.exists():
            print(f"  ‚úÖ {file}")
        else:
            errors.append(f"Fichier manquant: {file}")
            print(f"  ‚ùå {file}")
    
    # R√©pertoires requis
    required_dirs = [
        'models',
        'views', 
        'controllers',
        'static/src/css',
        'data',
        'security',
        'scripts',
        'documentation'
    ]
    
    print("\nüìÅ V√©rification des r√©pertoires...")
    for directory in required_dirs:
        dir_path = backup_path / directory
        if dir_path.exists():
            print(f"  ‚úÖ {directory}/")
        else:
            errors.append(f"R√©pertoire manquant: {directory}")
            print(f"  ‚ùå {directory}/")
    
    # Mod√®les Python
    model_files = [
        'models/__init__.py',
        'models/syndicat_adherent.py',
        'models/syndicat_assemblee.py',
        'models/syndicat_action.py',
        'models/syndicat_communication.py',
        'models/syndicat_convention.py',
        'models/syndicat_dashboard.py',
        'models/syndicat_formation.py',
        'models/syndicat_mediation.py',
        'models/syndicat_revendication.py',
        'models/res_partner.py'
    ]
    
    print("\nüêç V√©rification des mod√®les Python...")
    for model in model_files:
        model_path = backup_path / model
        if model_path.exists():
            print(f"  ‚úÖ {model}")
        else:
            errors.append(f"Mod√®le manquant: {model}")
            print(f"  ‚ùå {model}")
    
    # Vues XML
    view_files = [
        'views/menus.xml',
        'views/syndicat_adherent_views.xml',
        'views/syndicat_assemblee_views.xml',
        'views/syndicat_action_views.xml',
        'views/syndicat_communication_views.xml',
        'views/syndicat_convention_views.xml',
        'views/syndicat_dashboard_views.xml',
        'views/syndicat_formation_views.xml',
        'views/syndicat_mediation_views.xml',
        'views/syndicat_revendication_views.xml',
        'views/website/website_templates.xml'
    ]
    
    print("\nüìÑ V√©rification des vues XML...")
    for view in view_files:
        view_path = backup_path / view
        if view_path.exists():
            print(f"  ‚úÖ {view}")
        else:
            warnings.append(f"Vue manquante: {view}")
            print(f"  ‚ö†Ô∏è {view}")
    
    # Contr√¥leurs
    controller_files = [
        'controllers/__init__.py',
        'controllers/main.py',
        'controllers/portal.py'
    ]
    
    print("\nüéÆ V√©rification des contr√¥leurs...")
    for controller in controller_files:
        controller_path = backup_path / controller
        if controller_path.exists():
            print(f"  ‚úÖ {controller}")
        else:
            errors.append(f"Contr√¥leur manquant: {controller}")
            print(f"  ‚ùå {controller}")
    
    # CSS
    css_files = [
        'static/src/css/dashboard.css',
        'static/src/css/website.css'
    ]
    
    print("\nüé® V√©rification des fichiers CSS...")
    for css in css_files:
        css_path = backup_path / css
        if css_path.exists():
            print(f"  ‚úÖ {css}")
        else:
            warnings.append(f"CSS manquant: {css}")
            print(f"  ‚ö†Ô∏è {css}")
    
    # Donn√©es et s√©curit√©
    data_files = [
        'data/data.xml',
        'data/sequences.xml',
        'security/security.xml',
        'security/ir.model.access.csv'
    ]
    
    print("\nüîí V√©rification des donn√©es et s√©curit√©...")
    for data_file in data_files:
        data_path = backup_path / data_file
        if data_path.exists():
            print(f"  ‚úÖ {data_file}")
        else:
            warnings.append(f"Fichier de donn√©es manquant: {data_file}")
            print(f"  ‚ö†Ô∏è {data_file}")
    
    # Scripts utilitaires
    script_files = [
        'scripts/install_module.py',
        'scripts/update_module.py',
        'scripts/restart_server.py',
        'scripts/validate_corrections.py'
    ]
    
    print("\nüîß V√©rification des scripts...")
    for script in script_files:
        script_path = backup_path / script
        if script_path.exists():
            print(f"  ‚úÖ {script}")
        else:
            warnings.append(f"Script manquant: {script}")
            print(f"  ‚ö†Ô∏è {script}")
    
    # Documentation
    doc_files = [
        'documentation/README.md',
        'documentation/INSTALLATION.md',
        'documentation/RAPPORT_FINAL_ROUTES.md',
        'documentation/DIAGNOSTIC_500_FINAL.md'
    ]
    
    print("\nüìö V√©rification de la documentation...")
    for doc in doc_files:
        doc_path = backup_path / doc
        if doc_path.exists():
            print(f"  ‚úÖ {doc}")
        else:
            warnings.append(f"Documentation manquante: {doc}")
            print(f"  ‚ö†Ô∏è {doc}")
    
    # Calcul des statistiques
    total_files = 0
    for root, dirs, files in os.walk(backup_path):
        total_files += len(files)
    
    print(f"\nüìä STATISTIQUES DE LA SAUVEGARDE")
    print(f"  üìÅ Fichiers totaux: {total_files}")
    print(f"  ‚úÖ Erreurs: {len(errors)}")
    print(f"  ‚ö†Ô∏è Avertissements: {len(warnings)}")
    
    # R√©sum√© final
    print(f"\nüéØ R√âSULTAT DE LA V√âRIFICATION")
    
    if not errors:
        print("‚úÖ SAUVEGARDE INT√àGRE - Tous les fichiers essentiels sont pr√©sents")
        if warnings:
            print(f"‚ö†Ô∏è {len(warnings)} avertissements (fichiers optionnels manquants)")
        else:
            print("üèÜ SAUVEGARDE PARFAITE - Aucun probl√®me d√©tect√©")
        return True
    else:
        print(f"‚ùå SAUVEGARDE INCOMPL√àTE - {len(errors)} erreurs critiques")
        print("\nErreurs critiques:")
        for error in errors:
            print(f"  ‚ùå {error}")
        return False

if __name__ == "__main__":
    success = verify_backup()
    exit(0 if success else 1)