#!/usr/bin/env python3
"""
Script de validation finale pour SAMA SYNDICAT
V√©rification de toutes les corrections apport√©es aux liens et widgets
"""

import os
import re
import xml.etree.ElementTree as ET
from pathlib import Path

class CorrectionValidator:
    def __init__(self):
        self.module_path = Path(".")
        self.views_path = self.module_path / "views"
        self.models_path = self.module_path / "models"
        self.controllers_path = self.module_path / "controllers"
        
        # R√©sultats de validation
        self.validation_results = {
            'actions_defined': [],
            'python_methods': [],
            'website_enabled': False,
            'controllers_created': False,
            'templates_created': False,
            'css_created': False,
            'dashboard_links_fixed': False,
            'all_widgets_working': True,
            'issues_found': [],
            'recommendations': []
        }
        
    def validate_actions(self):
        """Valider que toutes les actions sont d√©finies"""
        print("üîç Validation des actions d√©finies...")
        
        for xml_file in self.views_path.glob("*.xml"):
            try:
                tree = ET.parse(xml_file)
                root = tree.getroot()
                
                for record in root.findall(".//record[@model='ir.actions.act_window']"):
                    action_id = record.get('id')
                    if action_id:
                        self.validation_results['actions_defined'].append(action_id)
                        
            except ET.ParseError as e:
                self.validation_results['issues_found'].append(f"XML Error in {xml_file}: {e}")
                
        print(f"  ‚úÖ {len(self.validation_results['actions_defined'])} actions trouv√©es")
        
    def validate_python_methods(self):
        """Valider que toutes les m√©thodes Python existent"""
        print("üêç Validation des m√©thodes Python...")
        
        for py_file in self.models_path.glob("*.py"):
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                action_methods = re.findall(r'def (action_\w+)', content)
                self.validation_results['python_methods'].extend(action_methods)
                
            except Exception as e:
                self.validation_results['issues_found'].append(f"Python Error in {py_file}: {e}")
                
        print(f"  ‚úÖ {len(self.validation_results['python_methods'])} m√©thodes trouv√©es")
        
    def validate_website_features(self):
        """Valider les fonctionnalit√©s website"""
        print("üåê Validation des fonctionnalit√©s website...")
        
        # V√©rifier le manifeste
        try:
            with open("__manifest__.py", 'r', encoding='utf-8') as f:
                manifest_content = f.read()
                if "'website'" in manifest_content:
                    self.validation_results['website_enabled'] = True
                    print("  ‚úÖ Module website activ√© dans le manifeste")
                else:
                    self.validation_results['issues_found'].append("Module website non trouv√© dans les d√©pendances")
        except Exception as e:
            self.validation_results['issues_found'].append(f"Erreur lecture manifeste: {e}")
            
        # V√©rifier les contr√¥leurs
        if self.controllers_path.exists():
            self.validation_results['controllers_created'] = True
            print("  ‚úÖ Contr√¥leurs website cr√©√©s")
        else:
            self.validation_results['issues_found'].append("R√©pertoire controllers manquant")
            
        # V√©rifier les templates
        website_templates = self.views_path / "website" / "website_templates.xml"
        if website_templates.exists():
            self.validation_results['templates_created'] = True
            print("  ‚úÖ Templates website cr√©√©s")
        else:
            self.validation_results['issues_found'].append("Templates website manquants")
            
        # V√©rifier le CSS
        website_css = self.module_path / "static" / "src" / "css" / "website.css"
        if website_css.exists():
            self.validation_results['css_created'] = True
            print("  ‚úÖ CSS website cr√©√©")
        else:
            self.validation_results['issues_found'].append("CSS website manquant")
            
    def validate_dashboard_links(self):
        """Valider que les liens du dashboard sont corrig√©s"""
        print("üìä Validation des liens du dashboard...")
        
        dashboard_file = self.views_path / "syndicat_dashboard_views.xml"
        try:
            with open(dashboard_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # V√©rifier qu'il n'y a plus de liens href statiques
            static_links = re.findall(r'href="/web#action=', content)
            if not static_links:
                self.validation_results['dashboard_links_fixed'] = True
                print("  ‚úÖ Liens statiques du dashboard corrig√©s")
            else:
                self.validation_results['issues_found'].append(f"Liens statiques trouv√©s: {len(static_links)}")
                
            # V√©rifier la pr√©sence de t-on-click
            onclick_actions = re.findall(r't-on-click.*action:', content)
            if onclick_actions:
                print(f"  ‚úÖ {len(onclick_actions)} actions t-on-click trouv√©es")
            else:
                self.validation_results['issues_found'].append("Aucune action t-on-click trouv√©e")
                
        except Exception as e:
            self.validation_results['issues_found'].append(f"Erreur validation dashboard: {e}")
            
    def validate_widget_consistency(self):
        """Valider la coh√©rence des widgets"""
        print("üîß Validation de la coh√©rence des widgets...")
        
        # Actions d√©finies
        defined_actions = set(self.validation_results['actions_defined'])
        
        # M√©thodes Python disponibles
        python_methods = set(self.validation_results['python_methods'])
        
        # V√©rifier les widgets dans tous les fichiers XML
        for xml_file in self.views_path.glob("*.xml"):
            try:
                with open(xml_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # Chercher les boutons avec type="object"
                object_buttons = re.findall(r'name="([^"]+)".*type="object"', content)
                for button_action in object_buttons:
                    if button_action.startswith('action_') and button_action not in python_methods:
                        self.validation_results['issues_found'].append(
                            f"M√©thode manquante: {button_action} dans {xml_file.name}"
                        )
                        self.validation_results['all_widgets_working'] = False
                        
                # Chercher les actions dans les liens
                action_links = re.findall(r'action="([^"]+)"', content)
                for action_link in action_links:
                    if action_link not in defined_actions:
                        self.validation_results['issues_found'].append(
                            f"Action manquante: {action_link} dans {xml_file.name}"
                        )
                        self.validation_results['all_widgets_working'] = False
                        
            except Exception as e:
                self.validation_results['issues_found'].append(f"Erreur validation widgets {xml_file}: {e}")
                
        if self.validation_results['all_widgets_working']:
            print("  ‚úÖ Tous les widgets sont coh√©rents")
        else:
            print(f"  ‚ö†Ô∏è {len([i for i in self.validation_results['issues_found'] if 'manquante' in i])} probl√®mes trouv√©s")
            
    def generate_recommendations(self):
        """G√©n√©rer des recommandations"""
        print("üí° G√©n√©ration des recommandations...")
        
        recommendations = []
        
        if not self.validation_results['website_enabled']:
            recommendations.append("Activer le module website dans les d√©pendances")
            
        if not self.validation_results['controllers_created']:
            recommendations.append("Cr√©er les contr√¥leurs pour les pages publiques")
            
        if not self.validation_results['templates_created']:
            recommendations.append("Cr√©er les templates pour le site web")
            
        if not self.validation_results['css_created']:
            recommendations.append("Cr√©er le CSS pour le site web")
            
        if not self.validation_results['dashboard_links_fixed']:
            recommendations.append("Corriger les liens statiques du dashboard")
            
        if not self.validation_results['all_widgets_working']:
            recommendations.append("Corriger les widgets et actions manquantes")
            
        # Recommandations d'am√©lioration
        if len(self.validation_results['actions_defined']) < 10:
            recommendations.append("Consid√©rer l'ajout d'actions suppl√©mentaires pour une meilleure navigation")
            
        if len(self.validation_results['python_methods']) > 50:
            recommendations.append("Consid√©rer la refactorisation pour r√©duire la complexit√©")
            
        self.validation_results['recommendations'] = recommendations
        
        if recommendations:
            print(f"  üí° {len(recommendations)} recommandations g√©n√©r√©es")
        else:
            print("  ‚úÖ Aucune recommandation - Module optimal")
            
    def generate_final_report(self):
        """G√©n√©rer le rapport final"""
        print("üìã G√©n√©ration du rapport final...")
        
        report_content = f"""# RAPPORT FINAL DE VALIDATION - SAMA SYNDICAT V1.1
## Correction des Liens et Widgets

### üìä R√âSUM√â EX√âCUTIF
- **Actions d√©finies**: {len(self.validation_results['actions_defined'])}
- **M√©thodes Python**: {len(self.validation_results['python_methods'])}
- **Website activ√©**: {'‚úÖ OUI' if self.validation_results['website_enabled'] else '‚ùå NON'}
- **Contr√¥leurs cr√©√©s**: {'‚úÖ OUI' if self.validation_results['controllers_created'] else '‚ùå NON'}
- **Templates cr√©√©s**: {'‚úÖ OUI' if self.validation_results['templates_created'] else '‚ùå NON'}
- **CSS cr√©√©**: {'‚úÖ OUI' if self.validation_results['css_created'] else '‚ùå NON'}
- **Dashboard corrig√©**: {'‚úÖ OUI' if self.validation_results['dashboard_links_fixed'] else '‚ùå NON'}
- **Widgets coh√©rents**: {'‚úÖ OUI' if self.validation_results['all_widgets_working'] else '‚ùå NON'}

### ‚úÖ ACTIONS D√âFINIES ({len(self.validation_results['actions_defined'])})
"""
        for action in sorted(self.validation_results['actions_defined']):
            report_content += f"- {action}\\n"
            
        report_content += f"""
### üêç M√âTHODES PYTHON ({len(self.validation_results['python_methods'])})
"""
        for method in sorted(set(self.validation_results['python_methods'])):
            report_content += f"- {method}\\n"
            
        if self.validation_results['issues_found']:
            report_content += f"""
### ‚ö†Ô∏è PROBL√àMES TROUV√âS ({len(self.validation_results['issues_found'])})
"""
            for issue in self.validation_results['issues_found']:
                report_content += f"- {issue}\\n"
        else:
            report_content += """
### ‚úÖ AUCUN PROBL√àME TROUV√â
Tous les liens et widgets fonctionnent correctement.
"""
            
        if self.validation_results['recommendations']:
            report_content += f"""
### üí° RECOMMANDATIONS ({len(self.validation_results['recommendations'])})
"""
            for rec in self.validation_results['recommendations']:
                report_content += f"- {rec}\\n"
        else:
            report_content += """
### üèÜ AUCUNE RECOMMANDATION
Le module est optimalement configur√©.
"""
            
        report_content += f"""
### üåê URLS PUBLIQUES DISPONIBLES
Avec l'activation du module website, les URLs suivantes sont maintenant disponibles :

#### Pages Principales
- `/syndicat` - Page d'accueil
- `/syndicat/about` - √Ä propos
- `/syndicat/adhesion` - Formulaire d'adh√©sion
- `/syndicat/contact` - Contact

#### Contenu Dynamique
- `/syndicat/actualites` - Liste des actualit√©s
- `/syndicat/actualites/<id>` - D√©tail d'une actualit√©
- `/syndicat/revendications` - Revendications publiques
- `/syndicat/formations` - Formations ouvertes
- `/syndicat/formations/<id>/inscription` - Inscription formation

### üéØ CONCLUSION
{'üéâ SAMA SYNDICAT V1.1 est maintenant parfaitement configur√© avec tous les liens et widgets fonctionnels, plus un site web public complet !' if not self.validation_results['issues_found'] and self.validation_results['website_enabled'] else '‚ö†Ô∏è Des corrections suppl√©mentaires sont n√©cessaires.'}

---
**Rapport g√©n√©r√© le**: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Version**: SAMA SYNDICAT V1.1 Stable
**D√©velopp√© par**: POLITECH S√âN√âGAL
"""
        
        with open("RAPPORT_VALIDATION_FINALE.md", 'w', encoding='utf-8') as f:
            f.write(report_content)
            
        print("  ‚úÖ Rapport final sauvegard√©: RAPPORT_VALIDATION_FINALE.md")
        
    def run(self):
        """Ex√©cuter toutes les validations"""
        print("üöÄ VALIDATION FINALE - SAMA SYNDICAT V1.1")
        print("=" * 50)
        
        self.validate_actions()
        print()
        
        self.validate_python_methods()
        print()
        
        self.validate_website_features()
        print()
        
        self.validate_dashboard_links()
        print()
        
        self.validate_widget_consistency()
        print()
        
        self.generate_recommendations()
        print()
        
        self.generate_final_report()
        print()
        
        # R√©sum√© final
        issues_count = len(self.validation_results['issues_found'])
        recommendations_count = len(self.validation_results['recommendations'])
        
        if issues_count == 0 and self.validation_results['website_enabled']:
            print("üéâ VALIDATION R√âUSSIE - SAMA SYNDICAT V1.1 PARFAITEMENT CONFIGUR√â!")
            print("‚úÖ Tous les liens et widgets fonctionnent")
            print("‚úÖ Site web public activ√© et fonctionnel")
            print("‚úÖ Module pr√™t pour la production")
        elif issues_count == 0:
            print("‚úÖ VALIDATION R√âUSSIE - Liens et widgets fonctionnels")
            print(f"üí° {recommendations_count} recommandations pour optimiser")
        else:
            print(f"‚ö†Ô∏è VALIDATION PARTIELLE - {issues_count} probl√®mes √† corriger")
            print(f"üí° {recommendations_count} recommandations")
            
        print(f"üìä R√©sum√©: {len(self.validation_results['actions_defined'])} actions, {len(set(self.validation_results['python_methods']))} m√©thodes")

if __name__ == "__main__":
    validator = CorrectionValidator()
    validator.run()