#!/bin/bash

# Script d'analyse des logs Odoo pour SAMA SYNDICAT

echo "üîç ANALYSE DES LOGS ODOO - SAMA SYNDICAT"
echo "========================================"
echo ""

LOG_FILE="/var/log/odoo/odoo.log"

if [ ! -f "$LOG_FILE" ]; then
    echo "‚ùå Fichier de log non trouv√©: $LOG_FILE"
    exit 1
fi

echo "üìä R√âSUM√â DES ERREURS"
echo "--------------------"

# Compter les types d'erreurs
echo "üî¥ Erreurs totales:"
grep -c "ERROR" "$LOG_FILE" 2>/dev/null || echo "0"

echo "üü° Warnings totaux:"
grep -c "WARNING" "$LOG_FILE" 2>/dev/null || echo "0"

echo "üîµ Erreurs ParseError:"
grep -c "ParseError" "$LOG_FILE" 2>/dev/null || echo "0"

echo ""
echo "üìÖ ERREURS R√âCENTES (derni√®res 24h)"
echo "-----------------------------------"

# Erreurs des derni√®res 24h
TODAY=$(date +"%Y-%m-%d")
YESTERDAY=$(date -d "yesterday" +"%Y-%m-%d")

echo "Erreurs d'aujourd'hui ($TODAY):"
grep "$TODAY.*ERROR" "$LOG_FILE" | wc -l

echo "Erreurs d'hier ($YESTERDAY):"
grep "$YESTERDAY.*ERROR" "$LOG_FILE" | wc -l

echo ""
echo "üéØ ERREURS SP√âCIFIQUES √Ä SAMA_SYNDICAT"
echo "-------------------------------------"

# Rechercher les erreurs li√©es √† sama_syndicat
SAMA_ERRORS=$(grep -i "sama_syndicat" "$LOG_FILE" | grep -i "error" | wc -l)
echo "Erreurs sama_syndicat: $SAMA_ERRORS"

if [ $SAMA_ERRORS -gt 0 ]; then
    echo ""
    echo "D√©tails des erreurs sama_syndicat:"
    grep -i "sama_syndicat" "$LOG_FILE" | grep -i "error" | tail -5
fi

echo ""
echo "üîß ERREURS COMMUNES IDENTIFI√âES"
echo "-------------------------------"

# Analyser les types d'erreurs les plus fr√©quents
echo "1. Erreurs de modules manquants:"
grep -c "ModuleNotFoundError" "$LOG_FILE" 2>/dev/null || echo "0"

echo "2. Erreurs de base de donn√©es:"
grep -c "psycopg2.errors" "$LOG_FILE" 2>/dev/null || echo "0"

echo "3. Erreurs de vues XML:"
grep -c "View error context" "$LOG_FILE" 2>/dev/null || echo "0"

echo "4. Erreurs de champs manquants:"
grep -c "Field.*does not exist" "$LOG_FILE" 2>/dev/null || echo "0"

echo "5. Erreurs de cl√©s externes:"
grep -c "External ID not found" "$LOG_FILE" 2>/dev/null || echo "0"

echo ""
echo "üö® ERREURS CRITIQUES R√âCENTES"
echo "-----------------------------"

# Derni√®res erreurs critiques
echo "Derni√®res erreurs CRITICAL:"
grep "CRITICAL" "$LOG_FILE" | tail -3

echo ""
echo "Derni√®res erreurs ERROR:"
grep "ERROR" "$LOG_FILE" | tail -5

echo ""
echo "üîç ANALYSE DES MODULES PROBL√âMATIQUES"
echo "------------------------------------"

# Identifier les modules qui causent le plus d'erreurs
echo "Modules avec le plus d'erreurs:"
grep "ERROR" "$LOG_FILE" | grep -o "odoo\.addons\.[a-zA-Z_]*" | sort | uniq -c | sort -nr | head -5

echo ""
echo "üìã RECOMMANDATIONS"
echo "-----------------"

# V√©rifier les erreurs sp√©cifiques et donner des recommandations
if grep -q "rlPyCairo" "$LOG_FILE"; then
    echo "‚ö†Ô∏è  Probl√®me ReportLab d√©tect√© - Installer: pip install rlPyCairo"
fi

if grep -q "wkhtmltopdf" "$LOG_FILE"; then
    echo "‚ö†Ô∏è  Probl√®me wkhtmltopdf d√©tect√© - V√©rifier l'installation"
fi

if grep -q "could not serialize access" "$LOG_FILE"; then
    echo "‚ö†Ô∏è  Probl√®mes de concurrence DB d√©tect√©s - V√©rifier les connexions"
fi

if grep -q "ParseError" "$LOG_FILE"; then
    echo "‚ö†Ô∏è  Erreurs XML d√©tect√©es - V√©rifier la syntaxe des vues"
fi

if grep -q "External ID not found" "$LOG_FILE"; then
    echo "‚ö†Ô∏è  IDs externes manquants - V√©rifier les d√©pendances des modules"
fi

echo ""
echo "‚úÖ ANALYSE TERMIN√âE"
echo "Pour plus de d√©tails, consultez: $LOG_FILE"