#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
R√©sum√© du module sama_syndicat
"""

import os
import glob

def count_lines_in_file(filepath):
    """Compte les lignes dans un fichier"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return len(f.readlines())
    except:
        return 0

def get_file_stats():
    """Statistiques des fichiers"""
    stats = {
        'python': {'count': 0, 'lines': 0},
        'xml': {'count': 0, 'lines': 0},
        'csv': {'count': 0, 'lines': 0},
        'md': {'count': 0, 'lines': 0},
        'sh': {'count': 0, 'lines': 0},
    }
    
    for root, dirs, files in os.walk('sama_syndicat'):
        for file in files:
            filepath = os.path.join(root, file)
            lines = count_lines_in_file(filepath)
            
            if file.endswith('.py'):
                stats['python']['count'] += 1
                stats['python']['lines'] += lines
            elif file.endswith('.xml'):
                stats['xml']['count'] += 1
                stats['xml']['lines'] += lines
            elif file.endswith('.csv'):
                stats['csv']['count'] += 1
                stats['csv']['lines'] += lines
            elif file.endswith('.md'):
                stats['md']['count'] += 1
                stats['md']['lines'] += lines
            elif file.endswith('.sh'):
                stats['sh']['count'] += 1
                stats['sh']['lines'] += lines
    
    return stats

def main():
    """Fonction principale"""
    print("üèõÔ∏è  SAMA SYNDICAT - R√©sum√© du Module")
    print("=" * 60)
    
    # Informations g√©n√©rales
    print("\nüìã INFORMATIONS G√âN√âRALES")
    print("-" * 30)
    print("Nom du module    : SAMA SYNDICAT")
    print("Version          : 1.0.0")
    print("Auteur           : POLITECH S√âN√âGAL")
    print("Licence          : LGPL-3")
    print("Type             : Application Odoo 18 CE")
    
    # Statistiques des fichiers
    print("\nüìä STATISTIQUES DES FICHIERS")
    print("-" * 30)
    stats = get_file_stats()
    total_files = sum(s['count'] for s in stats.values())
    total_lines = sum(s['lines'] for s in stats.values())
    
    for file_type, data in stats.items():
        if data['count'] > 0:
            print(f"{file_type.upper():10} : {data['count']:2} fichiers, {data['lines']:4} lignes")
    
    print(f"{'TOTAL':10} : {total_files:2} fichiers, {total_lines:4} lignes")
    
    # Mod√®les
    print("\nüóÉÔ∏è  MOD√àLES DE DONN√âES")
    print("-" * 30)
    models = [
        "syndicat.adherent      - Gestion des adh√©rents et cotisations",
        "syndicat.assemblee     - Assembl√©es et syst√®me de vote",
        "syndicat.revendication - Revendications et n√©gociations",
        "syndicat.action        - Actions syndicales (gr√®ves, manifestations)",
        "syndicat.communication - Communications multi-canaux",
        "syndicat.formation     - Formations avec certifications",
        "syndicat.convention    - Conventions collectives",
        "syndicat.mediation     - Gestion des conflits et m√©diations",
        "syndicat.dashboard     - Tableau de bord analytique",
        "res.partner (√©tendu)   - Extension des contacts"
    ]
    
    for model in models:
        print(f"‚Ä¢ {model}")
    
    # Fonctionnalit√©s
    print("\nüöÄ FONCTIONNALIT√âS PRINCIPALES")
    print("-" * 30)
    features = [
        "‚úÖ Gestion z√©ro papier compl√®te",
        "‚úÖ Interface web responsive",
        "‚úÖ Portail adh√©rents",
        "‚úÖ Tableau de bord analytique",
        "‚úÖ Communications multi-canaux",
        "‚úÖ Syst√®me de vote √©lectronique",
        "‚úÖ Gestion des formations",
        "‚úÖ Suivi des conventions collectives",
        "‚úÖ M√©diation des conflits",
        "‚úÖ S√©curit√© par r√¥les",
        "‚úÖ API REST int√©gr√©e",
        "‚úÖ Rapports et statistiques"
    ]
    
    for feature in features:
        print(feature)
    
    # Vues disponibles
    print("\nüëÅÔ∏è  VUES DISPONIBLES")
    print("-" * 30)
    views = [
        "Kanban    - Vue par d√©faut avec cartes interactives",
        "Liste     - Tableaux avec √©dition en masse",
        "Formulaire- Formulaires d√©taill√©s avec workflow",
        "Graphique - Statistiques et analyses",
        "Pivot     - Analyses crois√©es",
        "Calendrier- Planning des √©v√©nements"
    ]
    
    for view in views:
        print(f"‚Ä¢ {view}")
    
    # S√©curit√©
    print("\nüîí S√âCURIT√â")
    print("-" * 30)
    security = [
        "Adh√©rent    - Acc√®s limit√© aux donn√©es personnelles",
        "Utilisateur - Acc√®s lecture/√©criture aux donn√©es courantes",
        "Secr√©taire  - Gestion des communications et assembl√©es",
        "Tr√©sorier   - Gestion des cotisations et finances",
        "Formateur   - Gestion des formations",
        "Responsable - Acc√®s complet √† toutes les donn√©es"
    ]
    
    for role in security:
        print(f"‚Ä¢ {role}")
    
    # Scripts de d√©veloppement
    print("\nüõ†Ô∏è  SCRIPTS DE D√âVELOPPEMENT")
    print("-" * 30)
    scripts = [
        "validate_syntax.py - Validation syntaxique",
        "quick_install.sh   - Installation rapide",
        "simple_test.py     - Test complet",
        "test_module.py     - Test avanc√©",
        "module_summary.py  - Ce r√©sum√©"
    ]
    
    for script in scripts:
        print(f"‚Ä¢ {script}")
    
    # Instructions de d√©marrage
    print("\nüöÄ D√âMARRAGE RAPIDE")
    print("-" * 30)
    print("1. Validation : python3 sama_syndicat/dev_scripts/validate_syntax.py")
    print("2. Installation: ./sama_syndicat/dev_scripts/quick_install.sh")
    print("3. D√©marrage   : python3 sama_syndicat/start_syndicat.py")
    print("4. Acc√®s web   : http://localhost:8070")
    
    print("\n" + "=" * 60)
    print("üéâ Module SAMA SYNDICAT pr√™t pour l'installation!")

if __name__ == "__main__":
    main()