#!/usr/bin/env python3
"""
Nettoyage direct de la base de donn√©es PostgreSQL
"""

import subprocess
import sys

def clean_database_direct():
    """Nettoyer directement la base de donn√©es PostgreSQL"""
    print("üßπ NETTOYAGE DIRECT DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    DATABASE = "sama_syndicat_final_1756812346"
    
    # Commandes SQL de nettoyage
    sql_commands = [
        # Supprimer les enregistrements ir.model.data probl√©matiques
        """
        DELETE FROM ir_model_data 
        WHERE module = 'web_studio_community' 
        AND model = 'ir.model.fields';
        """,
        
        # Supprimer les champs personnalis√©s ajout√©s par erreur
        """
        DELETE FROM ir_model_fields 
        WHERE model = 'ir.model.fields' 
        AND name IN ('default_value', 'help', 'domain', 'context')
        AND state = 'manual';
        """,
        
        # Nettoyer les contraintes orphelines
        """
        DELETE FROM ir_model_constraint 
        WHERE module = 'web_studio_community' 
        AND name LIKE '%ir_model_fields%';
        """,
        
        # V√©rifier l'√©tat final
        """
        SELECT COUNT(*) as count FROM ir_model_fields 
        WHERE model = 'ir.model.fields' 
        AND name IN ('default_value', 'help', 'domain', 'context');
        """
    ]
    
    print("üóÑÔ∏è Connexion √† PostgreSQL...")
    
    for i, sql in enumerate(sql_commands, 1):
        print(f"\nüìù Ex√©cution de la commande {i}/{len(sql_commands)}...")
        
        # Cr√©er un fichier SQL temporaire
        sql_file = f'/tmp/cleanup_{i}.sql'
        with open(sql_file, 'w') as f:
            f.write(sql.strip())
        
        # Ex√©cuter la commande SQL
        cmd = ['psql', '-d', DATABASE, '-f', sql_file]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                print(f"‚úÖ Commande {i} ex√©cut√©e avec succ√®s")
                if result.stdout.strip():
                    print(f"   R√©sultat: {result.stdout.strip()}")
            else:
                print(f"‚ö†Ô∏è Avertissement commande {i}: {result.stderr.strip()}")
        except subprocess.TimeoutExpired:
            print(f"‚è∞ Timeout commande {i}")
        except Exception as e:
            print(f"‚ùå Erreur commande {i}: {e}")
        
        # Nettoyer le fichier temporaire
        try:
            subprocess.run(['rm', sql_file], capture_output=True)
        except:
            pass
    
    print("\nüîÑ Red√©marrage des services PostgreSQL...")
    try:
        subprocess.run(['sudo', 'systemctl', 'restart', 'postgresql'], capture_output=True, timeout=30)
        print("‚úÖ PostgreSQL red√©marr√©")
    except:
        print("‚ö†Ô∏è Impossible de red√©marrer PostgreSQL (peut n√©cessiter des privil√®ges)")
    
    return True

def update_module_after_clean():
    """Mettre √† jour le module apr√®s nettoyage"""
    print("\nüîÑ MISE √Ä JOUR DU MODULE APR√àS NETTOYAGE")
    print("=" * 50)
    
    DATABASE = "sama_syndicat_final_1756812346"
    ODOO_BIN = "/var/odoo/odoo18/odoo-bin"
    ADDONS_PATH = "/var/odoo/odoo18/odoo/addons,/var/odoo/odoo18/addons,/tmp/addons_sama_syndicat"
    PORT = 8077
    
    # Arr√™ter les processus existants
    print("üõë Arr√™t des processus Odoo...")
    subprocess.run(['pkill', '-f', 'odoo-bin'], capture_output=True)
    
    # Mettre √† jour le module
    cmd = [
        'python3', ODOO_BIN,
        f'--addons-path={ADDONS_PATH}',
        f'--database={DATABASE}',
        f'--xmlrpc-port={PORT}',
        '-u', 'web_studio_community',
        '--stop-after-init',
        '--log-level=warn'
    ]
    
    print("üîÑ Mise √† jour du module...")
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
        if result.returncode == 0:
            print("‚úÖ Module mis √† jour avec succ√®s")
            return True
        else:
            print("‚ùå Erreur lors de la mise √† jour")
            print(result.stderr[-500:])
            return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Fonction principale"""
    print("üéØ NETTOYAGE COMPLET DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    # √âtape 1: Nettoyage direct
    if not clean_database_direct():
        print("‚ùå √âchec du nettoyage direct")
        return False
    
    # √âtape 2: Mise √† jour du module
    if not update_module_after_clean():
        print("‚ùå √âchec de la mise √† jour du module")
        return False
    
    print("\nüéâ NETTOYAGE COMPLET R√âUSSI!")
    print("La base de donn√©es a √©t√© nettoy√©e et le module mis √† jour.")
    print("Vous pouvez maintenant tester l'acc√®s aux param√®tres.")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)