#!/bin/bash

# Script de d√©marrage SAMA SYNDICAT
# Arr√™te le processus sur le port 8070 et d√©marre le module

# Configuration
PORT=8070
DATABASE="sama_syndicat_final_1756812346"
ODOO_BIN="/var/odoo/odoo18/odoo-bin"
ADDONS_PATH="/var/odoo/odoo18/odoo/addons,/var/odoo/odoo18/addons,/tmp/addons_sama_syndicat"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_banner() {
    echo "=================================================="
    echo "üöÄ SAMA SYNDICAT - D√âMARRAGE AUTOMATIQUE"
    echo "=================================================="
    echo "üìä Module: SAMA SYNDICAT"
    echo "üåê Port: $PORT"
    echo "üíæ Base: $DATABASE"
    echo "=================================================="
}

stop_processes() {
    print_info "Arr√™t des processus existants sur le port $PORT..."
    
    # M√©thode 1: Arr√™ter tous les processus odoo-bin
    if pgrep -f "odoo-bin" > /dev/null; then
        print_info "Arr√™t des processus odoo-bin..."
        pkill -f "odoo-bin"
        sleep 2
        print_success "Processus odoo-bin arr√™t√©s"
    fi
    
    # M√©thode 2: Arr√™ter par port avec lsof
    if command -v lsof > /dev/null; then
        PIDS=$(lsof -ti :$PORT 2>/dev/null)
        if [ ! -z "$PIDS" ]; then
            print_info "Arr√™t des processus sur le port $PORT..."
            echo $PIDS | xargs kill 2>/dev/null
            sleep 2
            print_success "Processus sur le port $PORT arr√™t√©s"
        fi
    fi
    
    # M√©thode 3: fuser (si disponible)
    if command -v fuser > /dev/null; then
        fuser -k ${PORT}/tcp 2>/dev/null
        print_success "Port $PORT lib√©r√© avec fuser"
    fi
    
    # V√©rification finale
    if command -v lsof > /dev/null; then
        if lsof -ti :$PORT > /dev/null 2>&1; then
            print_warning "Le port $PORT semble encore occup√©"
        else
            print_success "Port $PORT disponible"
        fi
    fi
    
    print_info "Attente de la lib√©ration compl√®te du port..."
    sleep 3
}

check_odoo() {
    if [ ! -f "$ODOO_BIN" ]; then
        print_error "Odoo non trouv√© √†: $ODOO_BIN"
        
        # Rechercher dans des emplacements communs
        print_info "Recherche d'Odoo dans les emplacements communs..."
        
        COMMON_PATHS=(
            "/usr/bin/odoo"
            "/usr/local/bin/odoo"
            "/opt/odoo/odoo-bin"
            "/home/odoo/odoo/odoo-bin"
        )
        
        for path in "${COMMON_PATHS[@]}"; do
            if [ -f "$path" ]; then
                print_success "Odoo trouv√© √†: $path"
                ODOO_BIN="$path"
                return 0
            fi
        done
        
        # V√©rifier dans le PATH
        if command -v odoo > /dev/null; then
            ODOO_BIN=$(which odoo)
            print_success "Odoo trouv√© dans le PATH: $ODOO_BIN"
            return 0
        fi
        
        print_error "Odoo non trouv√©. Veuillez installer Odoo ou ajuster le chemin."
        return 1
    fi
    
    print_success "Odoo trouv√©: $ODOO_BIN"
    return 0
}

start_odoo() {
    print_info "D√©marrage d'Odoo avec SAMA SYNDICAT..."
    
    # V√©rifier que Python3 est disponible
    if ! command -v python3 > /dev/null; then
        print_error "Python3 non trouv√©"
        return 1
    fi
    
    # Construire la commande
    CMD="python3 \"$ODOO_BIN\" \
        --addons-path=\"$ADDONS_PATH\" \
        --database=\"$DATABASE\" \
        --xmlrpc-port=$PORT \
        --dev=reload,xml \
        --log-level=info \
        --workers=0 \
        --max-cron-threads=0"
    
    print_info "Commande de d√©marrage:"
    echo "$CMD"
    echo
    
    print_success "üåê Interface disponible sur: http://localhost:$PORT"
    print_success "üìä Dashboard SAMA: http://localhost:$PORT/web"
    print_success "üîó Acc√®s direct: http://localhost:$PORT/web/login?db=$DATABASE"
    echo
    print_info "üí° Pour arr√™ter le serveur, utilisez Ctrl+C"
    echo "=================================================="
    
    # D√©marrer Odoo
    eval $CMD
}

# Fonction de nettoyage en cas d'interruption
cleanup() {
    echo
    print_info "Arr√™t demand√© par l'utilisateur..."
    print_info "Nettoyage en cours..."
    pkill -f "odoo-bin" 2>/dev/null
    print_success "Nettoyage termin√©"
    exit 0
}

# Capturer Ctrl+C
trap cleanup SIGINT SIGTERM

main() {
    print_banner
    
    # √âtape 1: Arr√™ter les processus existants
    stop_processes
    
    # √âtape 2: V√©rifier Odoo
    if ! check_odoo; then
        exit 1
    fi
    
    # √âtape 3: D√©marrer Odoo
    start_odoo
}

# Ex√©cuter le script principal
main