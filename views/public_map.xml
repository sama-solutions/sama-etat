<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <template id="standalone_map_section" name="Enhanced Map">
        <div class="container mt-4">
            <div class="row">
                <div class="col-12">
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">
                                <i class="fas fa-map-marker-alt me-2"></i>
                                Carte Interactive des Projets, Décisions et Événements Publics
                            </h5>
                            <p class="mb-0 small">Découvrez les initiatives gouvernementales près de chez vous</p>
                        </div>
                        <div class="card-body">
                            <div id="enhanced-map" style="width: 100%; height: 500px; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"></div>

                            <div class="row mt-4">
                                <div class="col-md-4">
                                    <div class="form-check p-3 border rounded bg-light">
                                        <input class="form-check-input" type="checkbox" id="show_projects" checked="checked"/>
                                        <label class="form-check-label fw-bold" for="show_projects">
                                            <i class="fas fa-project-diagram text-primary me-2"></i>
                                            Projets <span class="badge bg-primary" id="project-count">0</span>
                                        </label>
                                        <small class="d-block text-muted">Projets de développement en cours</small>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check p-3 border rounded bg-light">
                                        <input class="form-check-input" type="checkbox" id="show_decisions" checked="checked"/>
                                        <label class="form-check-label fw-bold" for="show_decisions">
                                            <i class="fas fa-gavel text-warning me-2"></i>
                                            Décisions <span class="badge bg-warning text-dark" id="decision-count">0</span>
                                        </label>
                                        <small class="d-block text-muted">Décrets, arrêtés et circulaires</small>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-check p-3 border rounded bg-light">
                                        <input class="form-check-input" type="checkbox" id="show_events" checked="checked"/>
                                        <label class="form-check-label fw-bold" for="show_events">
                                            <i class="fas fa-calendar-alt text-info me-2"></i>
                                            Événements <span class="badge bg-info" id="event-count">0</span>
                                        </label>
                                        <small class="d-block text-muted">Conférences et forums publics</small>
                                    </div>
                                </div>
                            </div>

                            <div id="map-loading" class="text-center py-3" style="display: none;">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </div>
                                <p class="mt-2">Chargement de la carte...</p>
                            </div>

                            <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>
                            <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

                            <script type="text/javascript">
//<![CDATA[
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
        console.log('Initializing enhanced map with dynamic data...');
        document.getElementById('map-loading').style.display = 'block';

        try {
            // Initialize map centered on Senegal
            var map = L.map('enhanced-map').setView([14.5, -14.5], 7);

            // Add OpenStreetMap tiles
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors | Données gouvernementales du Sénégal',
                maxZoom: 18
            }).addTo(map);

            // Layer groups for different marker types
            var projectLayer = L.layerGroup();
            var decisionLayer = L.layerGroup();
            var eventLayer = L.layerGroup();

            // Custom marker icons with better styling
            var projectIcon = L.divIcon({
                className: 'custom-icon',
                html: '<div style="background: linear-gradient(45deg, #007bff, #0056b3); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border: 3px solid white; box-shadow: 0 3px 8px rgba(0,0,0,0.3); font-weight: bold; font-size: 12px;">P</div>',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            });

            var decisionIcon = L.divIcon({
                className: 'custom-icon',
                html: '<div style="background: linear-gradient(45deg, #ffc107, #e0a800); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border: 3px solid white; box-shadow: 0 3px 8px rgba(0,0,0,0.3); font-weight: bold; font-size: 12px;">D</div>',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            });

            var eventIcon = L.divIcon({
                className: 'custom-icon',
                html: '<div style="background: linear-gradient(45deg, #17a2b8, #138496); color: white; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; border: 3px solid white; box-shadow: 0 3px 8px rgba(0,0,0,0.3); font-weight: bold; font-size: 12px;">E</div>',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            });

            // Global variables for map data
            var mapData = {
                projects: [],
                decisions: [],
                events: []
            };

            // Fetch data from backend
            function fetchMapData() {
                return fetch('/sama_etat/get_map_data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        jsonrpc: '2.0',
                        method: 'call',
                        params: {}
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.result) {
                        mapData = data.result;
                        console.log('Map data loaded:', mapData);
                        updateMap();
                        document.getElementById('map-loading').style.display = 'none';
                    } else {
                        throw new Error('No data received from server');
                    }
                })
                .catch(error => {
                    console.error('Error fetching map data:', error);
                    document.getElementById('map-loading').style.display = 'none';
                    // Use fallback static data if dynamic loading fails
                    mapData = {
                        projects: [
                            {id: 1, name: 'Programme d\'Urgence de Développement Communautaire', description: 'Programme visant à améliorer l\'accès des populations rurales aux services sociaux de base', latitude: 14.716677, longitude: -17.467686},
                            {id: 2, name: 'Projet de Couverture Maladie Universelle', description: 'Extension de la couverture maladie à l\'ensemble de la population', latitude: 14.758945, longitude: -17.393754}
                        ],
                        decisions: [
                            {id: 1, name: 'Décret sur la numérisation de l\'état civil', description: 'Mise en place d\'un système numérique de gestion de l\'état civil', latitude: 14.716677, longitude: -17.467686}
                        ],
                        events: [
                            {id: 1, name: 'Forum National sur l\'Agriculture', description: 'Conférence sur l\'avenir de l\'agriculture sénégalaise', latitude: 14.716677, longitude: -17.467686}
                        ]
                    };
                    updateMap();
                });
            }

            // Function to create citizen-friendly tooltips
            function createProjectTooltip(project) {
                var statusText = '';
                var statusClass = '';
                switch(project.status) {
                    case 'in_progress': statusText = 'En cours'; statusClass = 'success'; break;
                    case 'validated': statusText = 'Validé'; statusClass = 'primary'; break;
                    case 'completed': statusText = 'Achevé'; statusClass = 'secondary'; break;
                    case 'draft': statusText = 'En préparation'; statusClass = 'warning'; break;
                    default: statusText = 'Statut inconnu'; statusClass = 'light';
                }

                return `
                    <div style="min-width: 300px; max-width: 400px;">
                        <h6 class="text-primary mb-2"><i class="fas fa-project-diagram me-1"></i>${project.name}</h6>
                        <p class="small mb-2">${project.description || 'Description non disponible'}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge bg-${statusClass}">${statusText}</span>
                            ${project.progress !== undefined ? `<small>Avancement: ${Math.round(project.progress)}%</small>` : ''}
                        </div>
                        <hr class="my-2">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Cliquez pour plus de détails sur ce projet qui impacte votre région
                        </small>
                    </div>
                `;
            }

            function createDecisionTooltip(decision) {
                var typeText = '';
                switch(decision.decision_type) {
                    case 'decree': typeText = 'Décret'; break;
                    case 'order': typeText = 'Arrêté'; break;
                    case 'circular': typeText = 'Circulaire'; break;
                    case 'instruction': typeText = 'Instruction'; break;
                    default: typeText = 'Décision officielle';
                }

                return `
                    <div style="min-width: 300px; max-width: 400px;">
                        <h6 class="text-warning mb-2"><i class="fas fa-gavel me-1"></i>${decision.title || decision.name}</h6>
                        <p class="small mb-2">${decision.description || 'Description non disponible'}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge bg-warning text-dark">${typeText}</span>
                            ${decision.reference ? `<small>Réf: ${decision.reference}</small>` : ''}
                        </div>
                        <hr class="my-2">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Cette décision officielle peut vous concerner
                        </small>
                    </div>
                `;
            }

            function createEventTooltip(event) {
                var eventDate = '';
                if (event.event_date) {
                    eventDate = new Date(event.event_date).toLocaleDateString('fr-FR');
                } else if (event.date_start) {
                    eventDate = new Date(event.date_start).toLocaleDateString('fr-FR');
                }

                return `
                    <div style="min-width: 300px; max-width: 400px;">
                        <h6 class="text-info mb-2"><i class="fas fa-calendar-alt me-1"></i>${event.name}</h6>
                        <p class="small mb-2">${event.description || 'Description non disponible'}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="badge bg-info">${event.event_type || 'Événement'}</span>
                            ${eventDate ? `<small>${eventDate}</small>` : ''}
                        </div>
                        ${event.location ? `<p class="small mb-1"><i class="fas fa-map-marker-alt me-1"></i>${event.location}</p>` : ''}
                        <hr class="my-2">
                        <small class="text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Événement public ouvert aux citoyens
                        </small>
                    </div>
                `;
            }

            function updateMap() {
                // Clear existing layers
                projectLayer.clearLayers();
                decisionLayer.clearLayers();
                eventLayer.clearLayers();
                map.removeLayer(projectLayer);
                map.removeLayer(decisionLayer);
                map.removeLayer(eventLayer);

                var allMarkers = [];
                var counts = {projects: 0, decisions: 0, events: 0};

                // Add project markers
                if (document.getElementById('show_projects').checked && mapData.projects) {
                    mapData.projects.forEach(function(project) {
                        if (project.latitude && project.longitude) {
                            var marker = L.marker([project.latitude, project.longitude], {icon: projectIcon})
                                .bindPopup(createProjectTooltip(project), {
                                    maxWidth: 400,
                                    className: 'custom-popup'
                                });

                            // Add click handler for project details
                            marker.on('click', function() {
                                // Could redirect to project detail page
                                console.log('Project clicked:', project);
                            });

                            projectLayer.addLayer(marker);
                            allMarkers.push(marker);
                            counts.projects++;
                        }
                    });
                    map.addLayer(projectLayer);
                }

                // Add decision markers
                if (document.getElementById('show_decisions').checked && mapData.decisions) {
                    mapData.decisions.forEach(function(decision) {
                        if (decision.latitude && decision.longitude) {
                            var marker = L.marker([decision.latitude, decision.longitude], {icon: decisionIcon})
                                .bindPopup(createDecisionTooltip(decision), {
                                    maxWidth: 400,
                                    className: 'custom-popup'
                                });

                            decisionLayer.addLayer(marker);
                            allMarkers.push(marker);
                            counts.decisions++;
                        }
                    });
                    map.addLayer(decisionLayer);
                }

                // Add event markers
                if (document.getElementById('show_events').checked && mapData.events) {
                    mapData.events.forEach(function(event) {
                        if (event.latitude && event.longitude) {
                            var marker = L.marker([event.latitude, event.longitude], {icon: eventIcon})
                                .bindPopup(createEventTooltip(event), {
                                    maxWidth: 400,
                                    className: 'custom-popup'
                                });

                            eventLayer.addLayer(marker);
                            allMarkers.push(marker);
                            counts.events++;
                        }
                    });
                    map.addLayer(eventLayer);
                }

                // Update counters
                document.getElementById('project-count').textContent = counts.projects;
                document.getElementById('decision-count').textContent = counts.decisions;
                document.getElementById('event-count').textContent = counts.events;

                // Fit map to markers if any exist
                if (allMarkers.length > 0) {
                    var group = new L.featureGroup(allMarkers);
                    map.fitBounds(group.getBounds(), {
                        padding: [20, 20],
                        maxZoom: 10
                    });
                    console.log('Map fitted to ' + allMarkers.length + ' markers');
                } else {
                    // Center on Senegal if no markers
                    map.setView([14.5, -14.5], 7);
                    console.log('No markers visible, using default Senegal view');
                }
            }

            // Load data and initialize map
            fetchMapData();

            // Event listeners for checkboxes
            document.getElementById('show_projects').addEventListener('change', updateMap);
            document.getElementById('show_decisions').addEventListener('change', updateMap);
            document.getElementById('show_events').addEventListener('change', updateMap);

            console.log('Enhanced map initialization complete');

        } catch (error) {
            console.error('Enhanced map error:', error);
            document.getElementById('enhanced-map').innerHTML = '<div class="alert alert-danger"><h6>Erreur de chargement de la carte</h6><p>' + error.message + '</p><small>Veuillez rafraîchir la page ou contacter le support technique.</small></div>';
            document.getElementById('map-loading').style.display = 'none';
        }
    }, 1000);
});

// Custom CSS for better popups
var style = document.createElement('style');
style.textContent = `
    .custom-popup .leaflet-popup-content-wrapper {
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    .custom-popup .leaflet-popup-content {
        margin: 12px 16px;
        line-height: 1.4;
    }
    .custom-icon {
        cursor: pointer;
        transition: transform 0.2s ease;
    }
    .custom-icon:hover {
        transform: scale(1.1);
    }
`;
document.head.appendChild(style);
//]]>
                            </script>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <template id="portal_my_home_map" name="Map" customize_show="True" inherit_id="sama_etat.modern_public_dashboard_page" priority="30">
        <xpath expr="//div[hasclass('modern-qr-container')]" position="after">
            <t t-call="sama_etat.standalone_map_section"/>
        </xpath>
    </template>
</odoo>
